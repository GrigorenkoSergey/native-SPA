const l=c=>{let r={...c,listeners:new Map,connect(e,s){const t=new WeakRef(e);this.listeners.set(t,s)},disconnect(e){this.listeners.forEach((s,t)=>{t.deref()===e&&this.listeners.delete(t)})},notify({observable:e,prop:s,value:t}){this.listeners.forEach((n,o)=>{const i=o.deref();if(!i)return this.listeners.delete(o);n({observable:e,listener:i,prop:s,value:t})})}};return r=new Proxy(r,{set(...e){const[s,t,n]=e;return queueMicrotask(()=>s.notify({observable:s,prop:t,value:n})),Reflect.set(...e)}}),r};console.log("init common store");const a=l({inputValue:""});export{a as s};
